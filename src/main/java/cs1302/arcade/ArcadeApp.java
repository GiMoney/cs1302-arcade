package cs1302.arcade;

import java.util.Random;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.text.*;
import javafx.util.Duration;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;

public class ArcadeApp extends Application {

    HBox hbox = new HBox();
    Group group = new Group();
    Text gi = new Text();
    Text le = new Text();
    Text text = new Text();
    Rectangle box = new Rectangle();
    Arcade2048 scene2048;
    ArcadeSpaceInvaders sceneSpace;
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(20, 20); // some rectangle
    

    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    private EventHandler<? super MouseEvent> createMouseHandler() {
	return event -> {
	    System.out.println(event);
	    r.setX(rng.nextDouble() * (640 - r.getWidth()));
	    r.setY(rng.nextDouble() * (480 - r.getHeight()));
	};
    } // createMouseHandler

    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    private EventHandler<? super KeyEvent> createKeyHandler() {
	return event -> {
	    System.out.println(event);
	    if (event.getCode() == KeyCode.LEFT)  r.setX(r.getX() - 20.0);
	    if (event.getCode() == KeyCode.RIGHT) r.setX(r.getX() + 20.0);
	    // TODO bounds checking
	};
    } // createKeyHandler

    /** {@inheritdoc} */
    @Override
    public void start(Stage stage) {
        letter();
        Button play2048 = new Button("Play 2048!");
        play2048.setLayoutX(100);
        play2048.setLayoutY(300);
        Button playSpace = new Button("Play Space Invaders!");
        playSpace.setLayoutX(250);
        playSpace.setLayoutY(300);
        Button spaceManual = new Button("Instructions for SI!");
        spaceManual.setLayoutX(250);
        spaceManual.setLayoutY(335);
        group.getChildren().addAll(box, gi, le, play2048, playSpace,text,spaceManual);
        EventHandler<ActionEvent> handler = e -> {
            box.setY(box.getY() + 6); //go to 20
            gi.setX(gi.getX() + 6); //go to 120
            le.setX(le.getX() - 6); //go to 240
            text.setX(text.getX()+10); };
        KeyFrame keyFrame = new KeyFrame(Duration.seconds(0.05), handler);
        Timeline timeline = new Timeline();
        timeline.setCycleCount(50);
        timeline.getKeyFrames().add(keyFrame);
        Scene sceneArcade = new Scene(group, 500, 400);
        sceneArcade.setFill(Color.GRAY);
        play2048.setOnAction(e -> {
                Thread t = new Thread(() -> {
                        scene2048 = new Arcade2048(new Board2048(), sceneArcade);
                        Platform.runLater(() -> stage.setScene(scene2048));
                        Platform.runLater(() -> stage.setTitle("2048!"));
                        Platform.runLater(() -> stage.sizeToScene());
                        scene2048.getBoard().requestFocus();});
                t.setDaemon(true);
                t.start(); }); //plays 2048 when pressed
        playSpace.setOnAction(e -> {
                Thread t = new Thread(() -> {
                        sceneSpace = new ArcadeSpaceInvaders(sceneArcade);
                        Platform.runLater(() -> stage.setScene(sceneSpace));
                        Platform.runLater(() -> stage.setTitle("Space Invaders!"));
                        Platform.runLater(() ->stage.sizeToScene());});
                t.setDaemon(true);
                t.start();}); //playes space when pressed
        spaceManual.setOnAction(e -> {
                manual();});
        timer(sceneArcade,stage,timeline); // shows the stage
    } // start
    
    /**
     *This method shows the stage
     *@param sceneArcade Scene
     *@param stage Stage
     *@param timeline Timeline
     */
    public void timer(Scene sceneArcade,Stage stage,Timeline timeline){
        stage.setTitle("Arcade!");
        stage.setScene(sceneArcade);
        stage.sizeToScene();
        stage.show();
        timeline.play();

    }
    /**
     *This method creates the Nodes we are moving
     */
    public void letter(){
        box = new Rectangle(50, -280, 400, 200);
        box.setFill(Color.DARKBLUE);
        gi = new Text(-180, 150, "Gi"); //makes the first half of team name
        gi.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 100));
        gi.setFill(Color.WHITE);
        gi.setStroke(Color.BLACK);
        gi.setStrokeWidth(5);
        le = new Text(540, 150, "Le"); //makes second half of team name
        le.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 100));
        le.setFill(Color.RED);
        le.setStroke(Color.WHITE);
        le.setStrokeWidth(5);
        text = new Text(-490,15,"Authors: Gi Suen and Kyle Mettile " +
                               "| Application Title: cs1302-arcade");
    }
    
    /**
     *This method creates the manual for the game
     */
    public void manual(){
        Thread t = new Thread(() -> {
                     Platform.runLater(() -> {
                             Alert a = new Alert(AlertType.INFORMATION);
                             a.setHeaderText("Instructions/Controls for Space Invaders:\n" +
                                             "Shoot:Space | " + "Move:Left or Right\n"+
                                             "You only got two lives=Sekiro:Shadows Die Twice"+
                                             " and invunerable for a sec and \n" +
                                             "you get teleported to the center if you get hit");
                             a.setContentText("1.Each round the enemy will move faster \n" +
                                              "2.You can spam shoot,but so will the enemy \n" +
                                              "3.Each round bullets go faster, for both sides \n"+
                                              "4.Enemy movement will move crazy on higher rounds"+
                                              ", BUT there is a pattern to it! \n" +
                                              "5.When you kill the last enemy, Time freezes\n" +
                                              "and your remaining bullets will hit the next wave\n"+
                                              "But the same goes for enemy bullets on you \n"+
                                              "6.There are also random speed demon bullets\n"+
                                              "7.The last few enemys won't shoot much\n" +
                                              "So you can set up bullets for next round\n" +
                                              "8.To play again,Options->close->SpaceInvaders");
                             
                             a.show();
                         });
                         });
              t.setDaemon(true);
              t.start();

    }

} // ArcadeApp
